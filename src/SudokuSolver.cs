// ---------------------------------------------------------------
// Copyright 2007, SAS Institute Inc.
// ---------------------------------------------------------------
using System;
using System.Xml;		// for XMLTextWriter and XMLTextReader
using System.IO;		// for StreamReader and StreamWriter
using System.Text;

// SAS AddIns namespace
using SAS.Shared.AddIns;

namespace SudokuSolver
{
	/// <summary>
	/// A custom task for use in SAS Enterprise Guide or the SAS Add-In for Microsoft Office
	/// </summary>
	public class SodukuSolver : SAS.Shared.AddIns.ISASTaskAddIn, SAS.Shared.AddIns.ISASTaskDescription, SAS.Shared.AddIns.ISASTask
	{
		// change these values for your task
		#region private members for boilerplate values
		
		// replace these boilerplate values with values that apply to your task
		private string sLabel = "Sudoku -- the SAS way!";
		private string sAddInName = "SAS Sudoku Solver";
		private string sAddInDescription = "SAS Sudoku Solver";
		private string sProductsReq = "BASE";
		private string sProductsOpt = "";
		private string sTaskName= "SAS Sudoku Solver";
		private string sCategory = "Puzzles";
		private string sTaskDescription = "Solves your daily sudoku so that you can get on with your life.";
		private string sFriendlyName = "SAS Sudoku Solver";
		private string sWhatIsDescription = "Solves your daily sudoku so that you can get on with your life.";
		
		#endregion
		
		// store reference to the application Consumer object
		private ISASTaskConsumer consumer = null;

		public SodukuSolver()
		{
		}

		#region ISASTaskAddIn Members

		public bool VisibleInManager
		{
			get
			{				
				return true;
			}
		}

		public string AddInName
		{
			get
			{				
				return sAddInName;
			}
		}

		public void Disconnect()
		{
			// perform cleanup tasks
			consumer = null;
		}

		public int Languages(out string[] Items)
		{		
			// by default, we support English 
			// Add more languages as needed
			Items = new string[] {"en-US"};
			return 1;
		}

		public string AddInDescription
		{
			get
			{				
				return sAddInDescription;
			}
		}

		public bool Connect(ISASTaskConsumer Consumer)
		{
			// perform any initialization needed when the application connects
			consumer = Consumer;
	
			// this is a good time to get the consumer.ActiveData, if your task requires it.

			return true;
		}

		public string Language
		{
			set
			{
				// if you support multiple languages, add handler here
			}
		}

		#endregion

		#region ISASTaskDescription Members

		public string ProductsRequired
		{
			get
			{
				// What SAS products are required for this task to run?
				return sProductsReq;
			}
		}

		public bool StandardCategory
		{
			get
			{
				// used typically only by SAS-supplied tasks			
				return false;
			}
		}

		public bool GeneratesListOutput
		{
			get
			{
				// Does this task generate ODS-style output?
				return true;
			}
		}

		public string TaskName
		{
			get
			{
				return sTaskName;
			}
		}

		public string Validation
		{
			get
			{
				// Add a validation string that makes sense for your organization
				// For example, "dev", "test", or "prod"
				return "";
			}
		}

		public string TaskCategory
		{
			get
			{
				// PLACEHOLDER: replace with your own category
				return sCategory;
			}
		}

		public string IconAssembly
		{
			get
			{
				// return the full path/name of this assembly, assuming that the
				// icon is embedded within the assembly
				return System.Reflection.Assembly.GetExecutingAssembly().Location;
			}
		}

		public string Clsid
		{
			get
			{
				// ClassID GUID generated by the template
				return "05285D0F-A876-403C-9C96-060066C7658E";
			}
		}

		public SAS.Shared.AddIns.ShowType TaskType
		{
			get
			{				
				return SAS.Shared.AddIns.ShowType.Wizard;
			}
		}

		public bool RequiresData
		{
			get
			{
				// Does your task require input data from the application?
				return false;
			}
		}

		public string IconName
		{
			get
			{
				// return the name of the icon within this assembly
				// including namespace qualifiers
				return "SudokuSolver.CustomTask.ico";
			}
		}

		public int MinorVersion
		{
			get
			{
				return 0;
			}
		}

		public int MajorVersion
		{
			get
			{
				return 1;
			}
		}

		public int NumericColsRequired
		{
			get
			{
				// How many numeric variables are required in input data, if any?
				return 0;
			}
		}

		public string TaskDescription
		{
			get
			{				
				return sTaskDescription;
			}
		}

		public bool GeneratesSasCode
		{
			get
			{
				// Return true if your task generates SAS program code
				return true;
			}
		}

		public string FriendlyName
		{
			get
			{
				// Replace with a user-friendly name for your task
				return sFriendlyName;
			}
		}

		public string ProcsUsed
		{
			get
			{
				// What SAS procedures are used in this task?
				return "";
			}
		}

		public string WhatIsDescription
		{
			get
			{
				// Longer description for your task
				return sWhatIsDescription;
			}
		}

		public string ProductsOptional
		{
			get
			{
				// What SAS products are optionally used by this task?
				return sProductsOpt;
			}
		}

		#endregion

		#region ISASTask Members

		public string RunLog
		{
			get
			{
				// if your task does not generate SAS code, you can supply your own
				// log text to record the work completed.
				return "";
			}
		}

		// manage the state of the task when serializing to and from the project
		// makes use of some helper methods: WriteXML and ReadXML
		public string XmlState
		{
			get
			{
				return WriteXML();
			}
			set
			{
				ReadXML(value);
			}
		}

		public void Terminate()
		{
			// Cleanup as needed
		}

		public SAS.Shared.AddIns.OutputData OutputDataInfo(int Index, out string Source, out string Label)
		{
			// no output data created
			Source = null;
			Label = null;
			return SAS.Shared.AddIns.OutputData.Unknown;

		}

		public string SasCode
		{
			get
			{	
				// Read the macro code file from an embedded SAS file
				string codetemplate = Global.ReadFileFromAssembly("SudokuSolver.sudoku_macro.sas");
				// add the macro call to solve this particular puzzle
				codetemplate += BuildMacroCall(puzzleData);
				return codetemplate;
			}
		}

		public bool Initialize()
		{
			// initialize this instance of your task
			return true;
		}

		private string BuildMacroCall(byte[,] data)
		{
			// use StringBuilder to build a string iteratively
			// That performs better than string concatenation
			StringBuilder datalines=new StringBuilder();
			for (int i = 0; i<9; i++)
			{
				for (int j = 0; j<9; j++)
				{
					if (data[i,j] ==0)
						datalines.Append(".,");
					else
						datalines.AppendFormat("{0},",data[i,j].ToString());
				}
				if (i!=8) datalines.Append("\n");
				else
					// trim the last comma
					datalines = datalines.Remove(datalines.Length-1,1);
			}
			return string.Format("\n\n%sudoku_solver(\n{0}\n)", datalines.ToString());
		}


		private byte[,] puzzleData = null;
		public SAS.Shared.AddIns.ShowResult Show(System.Windows.Forms.IWin32Window Owner)
		{
			// Show the default form for this custom task
			SudokuSolver.SudokuForm dlg = new SudokuSolver.SudokuForm();
			if (puzzleData!=null)
				dlg.SetData(puzzleData);
			dlg.Text = sLabel;

			if (dlg.ShowDialog()==System.Windows.Forms.DialogResult.OK)
			{
				puzzleData = dlg.GetData();
				return SAS.Shared.AddIns.ShowResult.RunNow;
			}
			else
				return SAS.Shared.AddIns.ShowResult.Canceled;
		}

		// The label this task is known by within a project
		public string Label
		{
			get
			{			
				return sLabel;
			}
			set
			{
				sLabel = value;
			}
		}

		public int OutputDataCount
		{
			get
			{				
				// does this task create any output data sets?
				return 0;
			}
		}

		#endregion

		// Augment these methods to save and retrieve the state of your task
		#region Helper methods for serialization 

		private string WriteXML()
		{
			char[] datastring = new char[81];
			int count=0;
			if (puzzleData!=null)
			{
				for (int i = 0; i<9; i++)
				{
					for (int j = 0; j<9; j++)
					{
						datastring[count] = Convert.ToChar(puzzleData[i,j]);
						count++;
					}
				}
			}
			
			StringWriter sw = new StringWriter();

			XmlTextWriter writer = new XmlTextWriter(sw);
			writer.WriteStartElement("SodukuSolver");
			writer.WriteElementString("DataString", new string(datastring));
			writer.WriteEndElement();
			writer.Close();

			return sw.ToString();
		}

		private void ReadXML(string xml)
		{
			string datastring = "";
			if (xml!=null && xml.Length>0)
			{
				try
				{
					StringReader sr = new StringReader(xml);
					XmlTextReader reader = new XmlTextReader(sr);
					reader.ReadStartElement("SodukuSolver");
					datastring = reader.ReadElementString("DataString");
					reader.ReadEndElement();
					reader.Close();
				}
				catch
				{
				}
			}
			if (datastring.Length==81)
			{
				puzzleData=new byte[9,9];
				int count=0;
				for (int i = 0; i<9; i++)
				{
					for (int j = 0; j<9; j++)
					{
						puzzleData[i,j]=Convert.ToByte(datastring[count]);
						count++;
					}
				}
			}
		}

		#endregion
	}
}
